{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"assignment02","version":"0.3.2","provenance":[{"file_id":"https://github.com/heartcored98/Standalone-DeepLearning/blob/master/Lec3/Lab4_write_pretty_DL_code.ipynb","timestamp":1548564848996}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"PD4cIKKvKFCC","colab_type":"code","colab":{}},"cell_type":"code","source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import argparse\n","import numpy as np"],"execution_count":0,"outputs":[]},{"metadata":{"id":"29UainWPco7Y","colab_type":"text"},"cell_type":"markdown","source":["\n","## Data Preparation"]},{"metadata":{"id":"Cu753dPPKGkV","colab_type":"code","outputId":"eb1c78a6-e8ce-42d6-da52-37660d35b0f6","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1548591331864,"user_tz":-540,"elapsed":2480,"user":{"displayName":"Sohee Kim","photoUrl":"","userId":"05479685237522775569"}}},"cell_type":"code","source":["transform = transforms.Compose(\n","    [transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n","                                        download=True, transform=transform)\n","trainset, valset = torch.utils.data.random_split(trainset, [40000, 10000])\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n","                                       download=True, transform=transform)\n","\n","\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","                                          shuffle=True, num_workers=2)\n","valloader = torch.utils.data.DataLoader(valset, batch_size=4, \n","                                        shuffle=False)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=4,\n","                                         shuffle=False, num_workers=2)\n","\n","classes = ('plane', 'car', 'bird', 'cat',\n","           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"],"execution_count":81,"outputs":[{"output_type":"stream","text":["Files already downloaded and verified\n","Files already downloaded and verified\n"],"name":"stdout"}]},{"metadata":{"id":"6z0X9rG6Wyge","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"outputId":"6a947957-0747-41ed-ba80-d4491c003b6b","executionInfo":{"status":"ok","timestamp":1548591331866,"user_tz":-540,"elapsed":2269,"user":{"displayName":"Sohee Kim","photoUrl":"","userId":"05479685237522775569"}}},"cell_type":"code","source":["print(len(trainset))\n","print(len(valset))\n","print(len(testset))"],"execution_count":82,"outputs":[{"output_type":"stream","text":["40000\n","10000\n","10000\n"],"name":"stdout"}]},{"metadata":{"id":"qA3JqSl9reXs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":269},"outputId":"7ac07d73-5b25-4453-e7cf-08669962830d","executionInfo":{"status":"ok","timestamp":1548591332524,"user_tz":-540,"elapsed":2426,"user":{"displayName":"Sohee Kim","photoUrl":"","userId":"05479685237522775569"}}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","\n","def imshow(img):\n","    img = img / 2  +0.5\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1,2,0)))\n","    plt.show()\n","    \n","    \n","dataiter = iter(trainloader)\n","images, labels = dataiter.next()\n","\n","imshow(torchvision.utils.make_grid(images))\n","for i in range(len(images)):\n","    print(classes[labels[i]])\n","# print(' '.join('%30s'% classes[labels[j]] for j in range(4)))\n","\n","print(type(images), images.shape)\n","print(type(labels), labels.shape, labels)"],"execution_count":83,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAd8AAACWCAYAAACfIIJIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAIABJREFUeJztvXmcXHWZ7/+cqlN7Ve9L0tnTZCFk\nF9AEwiLbIIi4IeZGr86dGRVHneudGxZRGplRWWRG8cXABWH8wfgjM/FehQtjchHixTGJkEAgCZCN\ndJJO71tV116nzv0jyXk+z0lX0nSSak0/73/621X1Pcv3fM/3VH2ezbBt2yZFURRFUcqGZ6wPQFEU\nRVHGG/rwVRRFUZQyow9fRVEURSkz+vBVFEVRlDKjD19FURRFKTP68FUURVGUMmOOtuP3vvc92rZt\nGxmGQXfccQctXLjwdB6XoiiKopy1jOrh+4c//IFaW1tpzZo1tHfvXrrjjjtozZo1p/vYFEVRFOWs\nZFQP340bN9KVV15JRETNzc00ODhIQ0NDFI1Gh/18S0sLERHdcsst9PDDD4/uSM8SxvsYjPfzJ9Ix\nINIxINIxGA/nf+zZNxyjsvn29PRQdXW1839NTQ11d3eftF9DQ8NodndWMd7HYLyfP5GOAZGOAZGO\nwXg/f2M06SW//e1v06WXXur8+v3sZz9L3/ve92jGjBnDfr6rq2vcD7SiKIqiHGNUsnNDQwP19PQ4\n/3d1dVF9fX3Jzx+TFlpaWk74M3w8MN7HYLyfP5GOAZGOAZGOwXg4/9MuO1900UW0bt06IiLasWMH\nNTQ0lLT3KoqiKIoiGdUv36VLl9J5551HN998MxmGQXfdddfpPi5FURRFOWsZdZzv3/7t357yzt0/\nyS3LOuVt/inw7W9/+7RtyzAM8f/prBB5zz33lHzvhsVTnPbu/Yed9o8e3+K0p0ydJvrMnnTkWK22\nAfpf//Y/ndeDfnbeM1xaTL6Yddp96aTTNm3+YMz0cQdbjofHx5/z2Dy/8FOGR/bxwfZwfLFdLBZF\nH5y7Xq9n+M9ZR9otLS3065/8C5nE+wlFYk57X7zdabdnesV+6prqnLbfx/1/eN8PnfbrW1+nUtRc\ndiccW8FpGzgihnsOwf/4MTLofQNdai+//f33HwU22e4Xytr/RFRdcpvTHvi/Pyj5uV/885NOG+eX\n3+cXnwsEAvxeKOS0zVDYaQeDAdHH5/dyO8jby+ZzTruY53nc38Xzk4gon4g77dowz2Mjz9udNe98\n0efym/8LERGdv+Ra8sw413m9z+Y+AVs+DyLwf9zguZ8v8AUxinJOGrCgGHDhbE8RXpcYcAw+eNP0\n8P5zSXlf7nzxn+n9ohmuFEVRFKXM6MNXURRFUcqMPnwVRVEUpcyM2uZ7JihlXzvb8HjO3Heeco2b\nXUg57f//ufec9qu7eUpt27tX9JlTP0j3ENHz67bQgoWLnNenzJjgtJNDadHH62Vb1Tv7eHu9PZzU\nJdEz4LSDvqDoXwSzEZp2bWKbj12QY1Y0uJMH7GuFItuMCoWC6IO2dsse/vpaBd5utmARedhuZYHl\nKWfxsaUzcj+9fWyHa5xQxfs3RnYrGzD3DDhOMW+Om0JF9wvH9xkh4h4/g/eB2Kfr//ftF+H+/Gm8\nxQy3k0MJpkyb6rSDYbblum2+fj//74W2AX4Mfr+PJHx9vSYfT76Qd9rJFM+76soK0bun46DT7u3o\ndNohg/e/e9urok9baztd/7Hn6Ol7/44uWPl55/XJ57NtOJ7oF32273nXaedqOLR1ygyuK2DYEdHH\nD/e23+J7yYL7Ouea334fr0EW8Rj4wBa898ABOlX0l6+iKIqilBl9+CqKoihKmfmjlZ2VkXGiUCN8\n73SGIBER+UyeOpWVLBt7TJBsLCkhzz73POfv1756I3/OHnTar74qw2QCEIZ0w03XO+0OkLd++Ytf\nOe333t0n+ntBdvYRy0ZFS8q5og/IoV4Pn6cFMhyeP5GUoT0lQpJMkLpMr4dCIAvi9owSMi8Rkc/D\nsjqGKlEJqft0MJL78nTfu6PZ3kjn+Pvd9vGbHf4eG82xjJSGyU1O24S54vV6xefwPZ+PQ4oML/Qx\n5VzBeemF0+npgnz9cB9VNXC4GxFRKMLzOACSePdhDklKp1OiDyXaiIgolWijDf/8qPPyB9tbnXax\nRoZEbdzxB6c9Ye4Sp900pRlOJkYSHh+vwfevDSGJhldeq3SG15ZsmscgYLKkbdlybRsN+stXURRF\nUcqMPnwVRVEUpcz8UcnOpSRTpTQnkrdOt/SFmAGWPz953XSnvec9lmnq62WGq6/89VVH/36azjmX\npep8odZpNzTJ6leDgyxXTWxi6a157mSnXVPP3pdPP/aU6L/nrXectt9kSawA0qHb+xxlY5SgCSRo\nt8erzxw+q5Vlc9sHCmHQSxTCzdksiZnEEvbkeinxBYMsfZmQVcs3BvfLeLlf3aeGt9WZNO0gFVWV\nvE80i7hkZ5zLPhO8nUF29rhk5yKYUzLxhNPGh0MoANnYgiFC/EF+zxvgXpEKzvff1irNQYn+I6am\nhD1ItaBIv/6/1vBxTZISslHL+6nI8XEOtO5x2rXTa0WfoofHJwdZrUy4LwupHtHn3Xdedtr9PRxh\nUVXBa5bPUyn6jKaygf7yVRRFUZQyow9fRVEURSkzf1Sy8x8T2WxW/I/B62ezxDZSfreRZaSLLuQi\nC//9y3OcdrBKSsizz610/uaLXCQhm2eZtbZBykZTZ7DUnEywPpXKs+Q6fwnv84aPXyv6/499nACE\nsiwL+iHpQNF2eReDeugF2SoISefdRUAKeZbuCKTAImT28EFi9ojpIRMTx0Pba/N4XLj0A2I/s6bP\nc9ov/t/f8v4zGVLODO77fSzu/2CYk83g/k8kO3u9PMdNSMaRzsm50tHR4bR9Bb4XotDHDxUGejr5\n80REdZMmcp8KTvxigtQdCMvEHl1Hk1RUTq6lwVZOphEGD/5856DoU4zzMeQjjU67L8ui74Tac0Qf\no5qTcRRAdi5kWLZufWej6PPOlvVOOxFn7+u6Wk50MnvWBXSq6C9fRVEURSkz+vBVFEVRlDKjD19F\nURRFKTPj3uaL4QGYpai7W9o1YjF2e68Au8ZIE6OPBMMehS3JHQZxOit9n4B/e5HtMRUVbBuaN59D\ngKxwlegTPFroOxgI0Ht72Gbc3s4ZZZYt+5Dos+ONnU67+zCHMS1ZfqHTLpps91p6IWe+ISJasHC+\n035j45tO2/RBAvmitPn6YFBtKIaQN/l1t80XCzAYYEMuQpGEYtEQbcPmcSuAfcyCAg5TamQQw4fm\nTXLar/4BksPnSmfsQk6ntfJEtk8PzGWckRbYwIuGtFfiJ20obiHvC/f8hgIZBtoVIeQGwriOfBDu\neShI4TlBZrEzxUjNx8fuHXenE4XJecCvIQM+CfHkkOhTA+FskyvZ5yLVzSE4hsFjkw9I+23fEPtv\nVFbzPR+o4M+FXRnhAjOOzP0pM86hjlif83pHKxdpCAzlRJ+aNG+v7Y2tTntShsem4SJ5bhYEAcVh\nuqXzXIzl9dfWiT793Ry65Pcm4XUew809vaLPh+dfRe8X/eWrKIqiKGVGH76KoiiKUmbGveyM2YiG\nhliy6HC502eyHOYSjbKU4fXKepqnwnGqM2bSKSknj03Yk11gGd4mCMMSoTkyE45xVOIzDJOqIASg\nvYPlrVd+J93+J06AMIYIZ7LCMAYLvkJW1Uipe9GSxU575x/edtq5PMjBrsxE+SL+z1JTLssymOGR\n4x4A2bmY588VUBaFz6cKFnkNrC/K7/kgFdaEelk7NRrjMJE559bw5yZwxrEdu6k0omb2CT43Ak4k\nOxsgsZe2prhCeOB//FXggW25hp0MDB8BuT8PCfXdlRE84poYw7ZL32+SUlmtTlTwxPXJEe3HhJAi\n3LbpkxKwKLoAoUIeMJP4o/K+rI3xelbjYQl39wGWgP1enqvLl31Y9N9xsM1pH4BiCnWQlcsfkSaG\n4tGiD9HqBqqH+9oHIVXxvftFn0QPrxM4Dw7t5GIsW19YK/qcf90nnXakiou0ZCHU0ReUZol8DqRr\ngwso2BAq6JbuR4P+8lUURVGUMqMPX0VRFEUpM+NSdi4lAUUiLHkUXd6shw8fhs+xTDJxwiQ6XVhF\n6bGKx4lyEno0HydalcfZma65hLO9nNPMUpUHamOGQ1LeIo/P+VvbyEnKs9t3OO3fvLxBdPnmN/7G\naU9ZwFlt0gWWgwwPjJNHynAzZ3PGm2CQr2+yP859AtJ04AfvaQJvZ7JYTsbMV0RENkiZKEnncyxp\nFaFYas4uUAEkbQuyWsWiLCHX1XGGLyKi/R0sly1YfJ7TnjRpNKndzxxCaoa2x8nk5SW/LTMt+Yqc\nVc6b5axHIeifz8nMc0MZHo9YNXvqpkMwvww5J/xFKEgB161YrptnFPhBXkZ5HjO1ERFVVbDU6wvx\nfM/AGIYqItiFimm+DmaWx2bBwkX8oRxHNxRc2f/mz+Wsa6k03yM+vA/cdYePno8ZqaAqL8/3aAOf\nT9x1bu1ReO8QmwWDBZaAN63/lewDNYkXXnWd0943yB7NmYyUkNMQOeCP8LHlIHLB4z/13636y1dR\nFEVRysyIHr67du2iK6+8kp5++mkiImpvb6fPfe5ztHLlSvrGN75BuVzuJFtQFEVRFOUYJ5WdU6kU\n3XPPPbRs2TLntR//+Me0cuVKuvbaa+nBBx+ktWvX0sqVK8/ogZ5O0FsQvzgMDnDgdXt7u+jz8oaX\nnPaHL7/Sad9ww41O23a5db5fb1LbllJ3HupsorSKeMidqAC9WYdvF4unnkxg+TLeRlcvS0ChPEt/\n1VOkp+6xhCSG4aFsjmXj6TNYwv7Yx64XfcJRrMEL44NSM8i5Hpc7bN1E9qquqmNvx85+DpK3j/O6\n5W37TPTA5e+qHneyfWgXwFsakyBgIo4j3qtQ9xeStVRVcdKDN9/mBARERBs2cqL3D17c7LQv+4is\nLzoyhp+gp8N/3oav9ThzPfCf3yPnYSjP86jtjV847aiXZc5EvF/06Ymz7PzBa/6T0/bVsJd8e1Ke\nkQ+Se3jhnrPh+grTzgk8l0dXz/f9j/DMKZy8JmyyFLoPktAQEQ2+y2Poqed7sWrhbKft84VFn6EM\nzPcYm5BqJvB9Ge9hs1sxLM1JWLd3djPX8E7APWaGgqLPoe4jcnDEZ1IOzACWh7ft8crCLD4wC/ZX\n8Lm17ebiKQasK0REe7dx8ZH2fW847YpJkEyk95DokxzkZ4JFvM8CmCINa2RJbU7ESX/5+v1+euyx\nx6ihgQdi8+bNdMUVVxAR0eWXX04bN24s1V1RFEVRFBeGPcKvaw899BBVV1fTqlWraNmyZc4D98CB\nA7R69Wp65plnSvbt6uoSD29FURRFGc+csrfzSJ7dDz/8MBERtbS0UEtLi/M6tomkHFqumpnpNMsU\nKDtv/sPvxedOl+xsGEbJMStY0naOsjPWE0bOpOz83e9+t+R7V4Hn8UA/e0KGQA6au/iDok8kFqXK\niTNpsH2fkJ0PHWLZpwcC6YmIFsxf4LQrI+ylmQfPWELZ2ZYekq3v8LbvXX2v0353N3s7et3ezuDJ\njHmes5D723TXUQVJHGv75osQwG8eEZp+37WXljc0UwRql+bAe9JXxcezaOFFYj+lZOdv3vYFp/30\nv0mPT6TuirucdrGEdHbcvDVGlkhCvCckXMZDR/Z5y4oAPfEfSdEnlOWkDm2vnZrsnJ1wsdNuT8o5\nEYL7zwOyc2EUsvNIXj/+vSPb+/qlfvrxBp4ffRv+vmT/eTM4quJEsnOxlz13S8nOwcqY6DOU4DEM\n+1h2ro/w51B2Drhk55oGNpO0HeJreDLZ+bbV36Ef3PddyoH3tAVrXjYrJeRkis+tv4PzwUvZWa5t\nRpEfceEYm2ZQdn6v94Doc3CQzzVYg7IzJNmx5LX+/FVfpuFwP+OQUT18w+EwZTIZCgaD1NnZ+Sf9\nqxZvrCyEMaQz8sK3tfEFwaT68n5z33zDL04lb1L3QxH2g0s99rePSwbvGfZz8ouN29pQeqEpSZFt\nSy/8mlMqrbj6z5z2/HCAJHnnbwiKc09p4vkzob5a9PBB6FKB4GEBp+BFO6/rC1CkmheQWCPboCsG\nuT2teaboY8J1G+him2tPJ9iJLTnu+TzMCbBhmWDzNeGYgx75YKcAL2jtA5xN7b3fcPYeIqLWLs7g\n1ZPZ67Q/+59PzelRXvdTD7mxRZEEnJNQ7N2U87AR7Pv7O/lLxoF2DkVLp+OiD4V4vlTBfOvEsT3R\nbYnzZYRzv5Sd98RjeGo/Jupq+AG3fzcXJXlr65vic/lDPF9z1TzHF4G/Q6Mp78tklh94mSxk/Evy\nnKqG7FCVjXwsRES1cM9W1fP87G7nNdPn+vFQWXdkG+edey7tP8DXemCAv8gXXWMWgSIY3km8PT+E\nEHa8t1/0SfbyeGQG+b7KJMA2bsr9xGwen0QPfzFJ57mNxVNGy6hCjZYvX07r1h2pBLF+/XpasWLF\nKR+IoiiKoowXTvrLd/v27XTvvfdSW1sbmaZJ69atowceeIBuu+02WrNmDTU1NdGNN954ss0oiqIo\ninKUkz5858+fT0899dRxrz/55JNn5IDKAcpDfj9LDJMmsTv/BEjoT0RUX88hK7PnzHHaGEpiWW4p\n4nj5zjCMktKu7cqqhdmV0gm2d6DUFQjLbDU5sJmkUiyzBINsc3HXos2CzaW6Wsq+pcgluJ2M87b9\nIZaQDZ88/2NhHV6jQAZIs7EQJICPSHtSDuynBbDPoXLuhX8s15ibARbsJ87kbFFN50xx2gsWLhB9\nUP7vB9l526a3uL1FysEWHJtX1FgFuR+up1GwCJNxWWBY6I/z9UjhQBNR0eSwjr4Ef65/UNpPxxwD\nixfwuRWhnXTZ5zyVPPemz1notF/cudlpp4ak7Dx53iynHajkawolZsnvut+8mNUKrpUQjbG4xij8\nT9zha6cq5ceTbAbb1co2yiGXdmlF+F5Kw5w83NHltKO1UjYuwL04MMg29UNQWGHSZM4YVtPIayER\n0UCKM2TZWDsZiiSgvZWIaFL0yLWeNHUGNTTxunvwIO/THe7Z3wdhd2CyyIMvxtRZs7AL9YS56EMf\n1A03ipCJy5a+D7VwY5oQihoo8tytqK2lU0UzXCmKoihKmdGHr6IoiqKUmT+qwgrCaRW8ydA5GL0l\n3RgGegGzlFB0effmMpBZCKRiP0iURdd+YjGunWobKKMRtKW0ZBTAExKyG6UgvCmRYFnR6zo1L5xP\nJ8icOZC0rKYpog/Woj14iOWpYIAloAqXBBQL8TRIZmTS9FLYFsv1H7lyhtNurIdrYLnCcY6GBHkM\nk4ogdWEdVq/XLdcZw7SIvB4sNIEhVfIa+Pz83vS5fJw+SNoeq5NFCQy4quEqltSDUR5DOyj3s+st\nDvno72HprgjSKor9mQKR4eX3UFacBOENc8+ZTciL2zh0yvCy3OcLyJqkp4brGgiP4BHKp/bw1wRN\nLpYhl5/2JI9QtHm+0/ZUsinCKnaKPmHIYDZY5OtoFXg/PkOODarIFiyBtlFKanaPB5yPiCACs4Ir\nCkGuW+9/2X16zb857UWLlzrtjL9VfC42lc1l1VW8ZoXD7PnsMVz3JRx3TQ1L/34/3yM9PVygIJd3\nh6jx9oZSvH4YcI/2DaVEj2O7TKQyVF/H17C5mef+jJkuCbmXow3au1lO7oCiN3H4DBGRD8xtfghV\nbN+/iz+UlQU+QjB3TIPXuUgAx00LKyiKoijKnxz68FUURVGUMjOmsnPepWBlMiwPhUJQIxY/5HII\nFrHOoFuj5JHIyk4vb3jNaR88xJJFLMayQk/HYdGns4eDv9/a8Y7TzkJyhcqo9DwO+1jySB+VNs6Z\n1UwvbeBk3/k8e9NNncmyKBHRYA9LbFse+x9Oe/8AS9WbXGojSqPxOHsH2kUez4XzFoo+3/jy5522\n35WJphQvb2IZavmHWB6KRnncPbY8OM/Ra+LxGERe/lwGvK1dDtJURJsDeKb6oL4pem+7szZ5QMau\nrmVJDb1ZQ65kIFicIZNhSapuCstjV91wjeizYAmP6W9f3OC0d76x3WlHoW5pMBCkAGTWMgpo/uD9\nX3Yx10olIpp13nTuE+QxnDRRFrE4FY7z1EXVmYQNCN5wZYHCIhRwk3occ1BQFFkgIkpk+XyiEU7Q\nP2fOXKfdeUDKijOmcfL/Sph7c6M8JwJeOSdyFh/rECxCg1l+PZXhPvmClGmLNi6beN5WibZLuMZh\nG+HPnz372ITUPI+98wM1VeJzWbgXslmWeutgP6mkrF9bgPu0ANESOVibqitgP671tMLPa04WojKC\nWB/dI0/0WKKfcGU15XJwzCnev8eU415Xzx7XMUjmMQvmR3pInltXG8vTXZD048AUXgve3fIH0SfR\nztvwmXCPgiklMXTq0QX6y1dRFEVRyow+fBVFURSlzOjDV1EURVHKzJjafF/a+Ib4H13bI+AWbuXY\n7lYdkxU5ursgI8sh1vdjlRx24AlLe9ieVrZXbt/ORQFSGbaRVshES2RDFZvtb3Gi9zde2+K0cy6X\n9UCAbYnZ3BFbxj/+wwP03PPPO6/PmMa2LV9Q2h6jAR6PKZBVqwrCFt7dtk302fse26MXL1nktM+b\nt5i3G5Hjgcnqt7rsH6X4+f/mpP4xyPbSdB6Pk4fkeBAdG1RLxFUZYGN123mKaM8dQTWmYtEV7gXG\ntupqCLGCj1W6qrwUITOQPwBhWGm2A1bV1og+c+ax3WnCFA73+NmjP3PafXswTMgr7IBFi21dvVCp\nJ2cNEHLJYg4t68mwTS4alpV7TgXDZa+04X+MOrKxwIDb5guXykt8nDXBY9sKUnONvFYVEPJW74UK\nVtO5ok8uIa8VRomdE+HsSHYeMsJZskiKAZV7KMLXMWXzPO5O8bG0JeQy2ZUCG6WF9yy3bUNeD9vL\n19dwxsOkkWa+qq7iYwtA+Mzk6VPF57D6mZXj+VoR4wUt6CpokYZiCib0T6V4HuYHeTx3v8l+DERE\nMQg18sM6WVvH12p/jwwRqzqaMdD0BciC8KRomPsMpWV4UtjP55CBuY/jEQqFRZ9ayOY157zznHZ8\ngP1ULrxAZrj7/XpeA7e9zucaB/+P/oLafBVFURTlTw59+CqKoihKmRlT2bmhRsqfYUjE3d3NRdUz\nWFvXlpLY7n0sf27ayBLwELiCT585TfTxmegaz1Lz0CDL0RlXKVqvh+WhDGx7oJPllKGkTIIfquDz\nC0IIz/79HDaQhswvqbSUMpYs4PCVqedCyEmQ5ZerqqUMN7uZiwfMm8cyy9w53L+/X0qZ0TAf27bX\nt9BIyEFmsLwFoUJQFL7gKuBQOCobF4pFGYoC5gZsExFhciKsoYvhRaK+qkvGw89FIPQB++DrR3s5\nrSyEW+SKfH38ASmPG1CudM4ClqA/9bmbnPazT6512hOmT6XegyxDE2T8Ktq8T69fnk8kwuPzMmQ9\ni06dS6eL43OM8SsFkU0MPuNKTh/z8f8zanmZmVHF1/2CBhkW4rX4/hno5Jq1gwNcexVD6YiIOvdz\nPdt3IPNSFK6P7Qp580EIYEVVo9OOVPO9Ewiz6aAKQlyIiGpSfLEP9rMUmczzfVkoygWkAKE2Nkxq\n93wtRV0dy879Pbw2HnaFRObBfFEPppHudpbkAz55bHW1XAylEkxIoQCP08GDUKDgoNxnhYfHY8ki\nNnUVh3hdmDFluujjix0xKzTUN1AvbM/K8fH7PPIes+D6GhaGskF4o2vyWgSFZqBucRrCG+snyyI6\nC5Z/yGl3wDl0vMtzreDK3jca9JevoiiKopQZffgqiqIoSpkZU9l5ydyZJd+bOYElkxxk/7FcXpX9\n3SwVx8J8Oh2HOBPOO693iD5VlZwdpR1ka7+fpYRYVEoRXhMyMiXYOzgNXneGV0qmQ1CkAOW6gX7O\nloWyc2WlTPDfcZgl7XiGJbnGJj62Ja5atPPOZS++NHjndhzmMRAyPhFt7eGxsq2RyWDXXXmO077i\nUpa0bZtluFRKylumeWTbOcsmGE7y+uAfl24k3jNO7u1su7ydMUMVJtkJh1kiDATldfNAdjRvnjtl\nsyAHuwpA4NwxIG3Rgg+wDNfeytfzgg+voN89y17vXYdZ0l4ENWqXQhJ9IqLWw+zd3xYHuT1w+jJc\nYaL8IxuH8QCZ1CzwPKqLyGszq55l9KkVMCcOv32kUX8Z9e94QfQZ7OP6rXvee89pd3WyPO8PuTx1\nh1iC3fYG1/2NxPheilbIzHMm3KcRMG9NnsL3YqSGJfFQWJppmgO8flSCA317guf7YEbWzB2y+Hiy\nYKMwjhP5h6cdsjO17uc1a8hV35jAPNZZwRJ9Ic9rUR9EiBARzZzBxTsMKMDigegLNLOEXFkGw1CP\ne90LfE0LUFzio1/8T6LPlIlHpO5YNEJZuBd3733baceqZAEYLHwxfSqbEhOQ1aqnr1v0wWgFElnX\n+NV0Sq6Hcagh3gYZuwjGxkhLE+No0F++iqIoilJm9OGrKIqiKGVmbOv5FqV+gR7KcZB2TQ973Xlc\nsmTrLvZAi/pZWgmZLBEOJKSssP/gfj4ESNyQ6wfPuJyU0XyQMKPzMHsODvSzZOsL+kWfDCQpz6RZ\netu5kxNhTAYJee4cWbt13rlc07T7IEtNEyGZfP206aJPrIoThntA3rKg4EAyJb1Mh+IsodSCh+RD\nDz1Epfj4R7gIRFU1j9XhTvYebzBchSZCR46hkC+QF8wHBnqCuhJpYL1Urxel3ZHJdfg5E4ox+CCZ\nACZDce/UAI/LgI+voe1S500vSrW8z3CE527zeeeK9pbf/t7532rdz+81sznmQIe8Vn/3kzVOewCk\nxBu/IOfeiChRGMFteMDatKbN+5wY5fGYUyuvW6XF3rHpNpaT23cfSQoz+bzLaN87MqFLV3eX0957\niPtkYJ9BVy3ZgIevXTzO92Kyi+/5yupq0ScM0QJVYZY2A1DMxYZzDqaktOvz87yu9KP5gqXmTo80\nZRwCD+l8Ec1LI5vHKZBWE7DmLP/gBeJzOUhIRAE+h6nTOFHJLkgsRES0ZMkyp90La+Xa555z2hdd\nc7HTPn+2LPYRBwl2wSJes0I4BfnbAAAgAElEQVRRPs9uuLZERHmTaPHsObRv3x7K9/L4pmDdD7jW\n0xx41CehuAxGwDTU1GMXapjIntw9vSxJd2bYDNc1II+taQqvr5/9/Bed9pqf/398Pu1tdKroL19F\nURRFKTP68FUURVGUMqMPX0VRFEUpM2Nq87UMGdKwH8Jh1v87u6wHDD7MUEBWPHjltxuddmUlh1v0\n9LC+P5CV3zGSUEA7B5lO+vs4BKinV7rjhyHkBe0qJoSceN3Fn6vYfpqGkIAwhKV4i2yb3rudCzYQ\nEXW1st1rKMn9D3fxuZlvyCTn8xctcdozp3M4UBDCBkyPtHFCVAbV1NTSSKis4jH43ZZdTts20BYs\nbfrW0WxRVj5HBsQaYQSRbbtsvlhtHOz9to1te9jXiYhMk21voTDYjD3YdocaQdEHODhfgOdKPi+z\nJgkTNLQ9Jo9B4+Ra0Z48k238O3ey78KBNrbpbfrpy2I/b+7i+TJhMl/HXHqkid5hrNDujh8x5HUr\nGrzP2ijb3WbWQOL+7HuiT7aPM1R1dezndheHzOxuk5mSWqHweS/ci5ig3+Oy9QdD/F4uydexL8Hz\nsycjE/QH/ZDpKMA2Th+c9lAc7teovCfCEQ41qqlkG2NFPR9LwnRl7zL5PSsvfSFGQmU17zMEWeSi\nrjC5WQt5TplwX8+aMd1pL50twxN3HOJwq54Mn/fMufy57Xveddr735Y240piv4blH77Maf/Z8hVO\nO+/yoaFUzvkbBL+IOUvZZpzLyz4dEFb6yMP/4LTnzoJQx4L0CZgQ47Eu1sA1KHD4WNGS62EYQlE/\ndDHb1F/Z8Gunvf/g+7+Gbkb08L3vvvtoy5YtVCgU6Etf+hItWLCAVq9eTZZlUX19Pd1///2imoai\nKIqiKKU56cN306ZNtHv3blqzZg319/fTxz/+cVq2bBmtXLmSrr32WnrwwQdp7dq1tHLlynIcr6Io\niqL8yXPSh+8FF1xACxceSfBfUVFB6XSaNm/eTHfffTcREV1++eX0xBNPjOrhm0pLiWAoybpPXQ0n\nPN+18y2n/eZOKW/1DbGMVuxhqTifw1NzZSMyWTLwQA3OiRM57CAWllJ11MfbiA+wJObxQQJ3U0ri\nNXUcRpRJ8rGdew6Hknghif6+3SzfEhF5IQF8AhKOd0E4ACZSJyLa18rZgGbMaOY3oAawVZB95sxh\nqbiuQWbmKUU+zePe0cryUE0DJJe3cqJP8Wiy+WLRIhlRhEViXYEupSIxMDTmBHV+PSAve7GGMPR3\n1wDGz2E7AInm3YeJ/3rgoIsQHhGtMkV7LmSy2vwymyj27eBMWPv7ZNYzKk53mlg71WO7wqVKwmOF\nyf49IK8HIbSHiCgMYXvTY9wOpjnkLhuX9VpzkBmop4tDOQ60cZ/WtkOiT+8AS4GGl0c0GOE5FQrJ\nNSMYgAxkULzELrIcm0u6JlEe9OUC3H+HWp12B2Shi8Vk+Eo1rE3nTIEaz/V8DWtcmbg6MrzPgeKx\nPl5ZIPkEePw8d8IezrRku+7/xUsgDAjGymfxflI+V3EakP+HvDyGJpj4+tr52hxqlyY5E2oXB0H2\ntl5jk+Dbb0mT2keuvZYWL15AW7a9Sf/+0r87r0+F+uYVMVkzu6aG1ybTz/O1fT8/Eyqyci3Y9eZO\np+1t5O0VIfTSXy+zw02+iJ8PQQhjikDN7HDs1JXekzpceb1ep9rQ2rVr6ZJLLqF0Ou3IzLW1tdTd\n3X2iTSiKoiiKAhi27f4OPzwvvvgiPfroo/TEE0/Q1VdfTRs3HvlW09raSrfeeis988wzJft2dXVR\nQ0NDyfcVRVEUZTwxIoerV155hR555BF6/PHHKRaLUTgcpkwmQ8FgkDo7O0/6YH344YeJiKilpYVa\nWlqc1//8v/xX8bl/+NHDTjs5yNLGYILbB3tlQmtfmKUITJBfyLLXnmFJKSIHWXIK4LUqvod4pJxj\ngYezAV54OZAlTJcndizIkqHnqLz8m/Vr6eorr3deL1q83YwhvweloDBDvsD7weO3slIiLEL9WYIE\n8kNQFMBjSMHj0R/90Gl/9PqPOO3v3t1CpfjCleyV+NZO9pbshBz0Cz94DnahpqYqmjzrfDq0+zUK\ng4QbgjrObgkZM5AZ4E2OHsn4GctVQzgHcn0O5EaUmoPBoOiDGa8wq1YqxV6z6bTMmoafw3amANe3\ncORazZmzjN59dyPt3bTHee+x+/7JaUdCLIMVw1PEfjbt5+2FY+zhfFcLZ+LZsaN0Tea6K+502lmY\nbn4D6ptaUslq8rMEW+1nCdmX5XY2Ib17+yEL03v72Zyy72j7nkd/T1/5lMyUlIFrZYOX+sQpk512\nNCw9l02ozZ0hHrfDHXz/WwU53/MFHjcf3Odh8Ho3QX6NhGWC/wkT+Himgufw1FlcRCMXkDWA9w3y\nsXWljxzz1y4z6aHf8pzsffkeKsV//H6T0/aAVD57olx7P/WZjzrtQhDu+SLLzgf2S9n41VaOMvFU\nscT+m1+xd2//QZZ2C3HIokVEoSr2Dr7485/gN5I8zltef030WXnTzfSdr9xC3/2nh+n+e7/vvD65\nns8n6Je1m+fO5/rkNQbUQe/g/Xygpkn0yT77G6cdhqiZzACPQTwmH4MTb7zGac+55hKnve4/1vP5\n7JDns2zFp2g48Hnn5qSycyKRoPvuu48effRRqjo6yMuXL6d169YREdH69etpxYoVJ9qEoiiKoijA\nSX/5vvDCC9Tf309/8zd/47z2gx/8gO68805as2YNNTU10Y033nhGD1JRFEVRziZO+vD9zGc+Q5/5\nzGeOe/3JJ5885Z1Ho9JDs6KCpZ5f/orlggB4MfrC0jPNB/Vn83n2QPOCl6lly9M0ffw59IbFNvlc\nyRrAO86DNW/Bc9hyFYpIQJ3IQo7bBztZprVt7j+QlXIOSpuNNZwc3oZ9poek3JeCAg4oSBuQTH7G\n9BmEzJrDCf9zhZHV892+m71bpzXzWOXeY7nRS1JW9Hoj/BeG2sY6m6a8VjaMKdbjRW9lmRRDXjeU\nly2RzIO365aqZdIOKLKARRpcxynkcXjdA56gWBPEYwQoWsPXJFwJntBhlgsXL5OSZ8M5vL14hvc5\nuZE9NHdIx9KS4D0SAdm5xiPnVLTA8nIuzZ6x8STP464uKVV397BM2d3LyTP6IQl/wnW/mFGWHH2V\nbLIwq3kMejs2iT7k4zVk8pKPOe1586Y7bcuVrCEJx2DbfI/5ISGKKKjhkj+DUZZZByvZ83lHipM4\nZJMy+UUavNEtqBc9srtNmkIwWiHsMplgnVoDPKnxfFKudaYW6ub2QLKWFJj7vHiPeKRg6oPhjUIy\njXg7rwU1fmmSa6ircv7OmMBjOAs8ySsicq2fUsfJTnIH2L4Vi/G4F03XGpxnk4mV5vuqEkxyFWEZ\nUXDg15zYZt/v2GPbivEYRjOuOsqjQNNLKoqiKEqZ0YevoiiKopQZffgqiqIoSpkZ08IKNdXSXvHx\nT1zttJ9bz4Wc2w6xncmflFp7DGyhRoZPpwghRGnbZReBMAZM5G+gtc4rv5dg1iIP2BEx345dlNl3\nPGgPttimlkixzSkPBdHRXktEVMixjWLirDlOe0It2z46XAlOOvrYDtefZHd8b4htLrNnzxF9QmBb\niSflMZTi4SfYFvLfvvIBp91QA4nMLRkGdazogW0b5IFwnCLYUr1eWZzChOvgHl8HYUuVNl+PZ3jb\nsAeMY26bbwGSs6OdF+2/HpfdC8O3DNin1+bzMT1QlN7jpVCM52W0lkNT3tv3ttNeTNL++sHZbH8M\n13AY0vSmkRXEQAywOAaJ5xqGHRERWQTZmfrZ1tbbzhmhDh06IPr09O132inwkRgy+Twjs64UfabM\n4aLuVROX8vFkucDIW89uFX08xP4bsSnL+Y0YZHdzJUBDC18Rwvss9EOwh28TESXhhST6f1joHyA7\n2bBmeJ3x9IprcCIScV4zBjt4PVwyfar4XADWNh86GcBSn3fd4yZc7uRBts9Xwj2SreP7OmnL+yVc\nwevHlCZejyPgB9FcIdfg+JtvEX36yN9r57BvyGSDbds1LptvLsNz9N3dnCktX8lzvzhN+hEVg+Cn\nAfdsBtZ9v09eg0g3r5sVKQgFS8H1jZTOqjdS9JevoiiKopQZffgqiqIoSpkZU9nZzbSpLKNddsVV\nTvuNbZwceygxIPoMxNmdfSDB0kx6EKRdlxSJNV7R2b8IcpLpygJlQ1apfIp1mgxkm3EXOcAwItxP\nRzvXOkWJ0nLViLUh7GfbG5y16L0ohwZYrnPLgZwSq2QJKBhmd/y5UEf2yEGw3pZOS8mxFHv28+cO\nvMftxUs4w0yuIGvM5vMZ569NMXgHpF1XJQUL4oNsaBsjy0dPWB4YawOjuu2uzZsDuV8UYLBL7x+v\noww7Agka9294yO9nWa2qluXD7i1cSMTKyXnYCIUrOrp47vf19NFIwBq+ONYY0uX1uOchh+Mk+vm+\n6u3kdi4jQ2v8lRc57UjdXKc9ZQJnRpt/2R2ij6+SE98XfBCaMgSJ7iNSZq2YwEVKKML9h+BedEu7\neE0NlINBTRWX16U7u1YT/hjcRzZJadYD/3sdHVyaWE5EDZjXaoIstaeT8h5r3QNrC8ipBpg/rLjM\nEmYPsgzdCLXOPwK1wcMwOMVqWcu2ooqPbT4cZ/9OPpbebW+JPntTQ0T3fJ/2/up58sI1SBVZNk4l\n5LmlQnAvpfgeNf28HrpKUVMASt2GIEtgEvY5UJAFYPxhPgYDQpLyYTA3eEdmnjsR+stXURRFUcqM\nPnwVRVEUpcyMqexccEkEPj/LGZ/85Oec9qILOPF3f7xH9Nn86u+c9uuv/sFpx1PgaVyQHqO5TAre\nQw9algt9ru8lBsjONhx4AQoZ5FzyhQ1yl8cLXrdQO9XnY1kj69IyLfhcPMMSXyqPkov0IvRDcYcM\neDtHA+zjeckHLxR9ApDxK5sdmZyydDF7GC5axFIzev1mc/IC54+Odb5QoGKBz60I52m5PClREkb5\nUGayQlnQneEKJEZ4S0iPbukeZGePSEtVcjeuksRgysBCEZDYnQyTAgGWy2rAm/TCCzi70wfOl1nC\n2t/jzFHpPG8vFI3RyAB5HGRPC+o950hKyFiwIFPJx+Np5sxoMZ/0TK2o4Dnhj03ifXr4PI2oTIJf\nKMI9C3PHIvbwjjScJ/qEpp7vtPNeljx9Lg/2kWAYI/VghfsaM6XB+lF0z0OQpI2RFZITZCBbnpnh\nceqAWrxERK37OPtWNMprQz7H+zy4r030KfTxtiNgkrOKfB94s/yZuoxcG2d5eR7v7Xneab8zxPvJ\nmFJiDxlHji3UlyAKQfYuqFVemZfRDYUcm7dMD69zsTouBmFFZDayZBWve8k8PAcCfL+854qiCFTx\nejgRZPTKGG9r0tCpl9HVX76KoiiKUmb04asoiqIoZWZMZWdXmV0qwleBWkgkkSmwLNE4YaLokwUp\noqeXPT4LEOQ+NCglgjQk6rBzmESBJaSMK+k7ekL7/CzN+D0s7ZiFQsk+mPC8qorPLZ9lCSmbcUll\nGLSPCQCKKIG7vJMhKUU2yduech57nJ43Z6boUlPJ52BZI5sSf7WKvVkbG9jL9NVtXKM22iQ9U4+N\nR9G2hbSLMq07yQbKzh7j5BKyO/kFqn/GcVrx8fsnkkk28nk+Hl/AX7JPKX9YCzzebQPO2UiRP8yf\na5zM0p3Hy17/3XG55R8//brTnjWPk6VcFZLJ4UtRSvBMGywHH7blPVbwcLL7QgOMAfSxPX7Rx8Ik\nJjZq8twskjTTeNEjGNV6P0uEtfOvxy5kReDYoI/HHpmEjEU9CmI5hOIaJ/Cs9wqvZszMITvZNsr9\npUwmJ6CEWcPnlSaCoD8A7/E1sWBADx2QCVE83exVXAsmKBNch72QYKLDI8e2chZfn3SG75cYFrop\nuEw7R81jtj9E3V5I5gGmu6JrLejHaBJYEM0wj4HRWINdqHoZJ2uZAIk+uvp5W//z1+tEHxPm5Qcr\neI5f1sxrqHlQytuj8X3WX76KoiiKUmb04asoiqIoZUYfvoqiKIpSZsbU5pt3FW7HEJoMFBkwIGzA\nU5T2hqkTJzvtpYsWO+1gkE+t7bDMyDLYz+FKmSSE8Axxu+ByP8cCDF74zoLJum2XnTgPdk0skpDC\nUCd0p3ebK03YdolwnKLLzlyA8AAbjGCNE9gWUl0jw0LSKbb5WG5DfAlmTuTxfe01LgSwvxuyXc2S\nBbSPnYNtFEvafN022wIUp/DCe6VChdw2Yy+EOLjttKXAQguiyAIem8sOWMC4OQw1Apseho4VrKLI\nMDV5+gynfQiS2//TT38j9rP5HbbpdRe42PmB9pFluMIDx5FOE1+rVFFeN8NTyugpDLgCTwn7ugzr\nktcaw53wc3l43a6ToUYmHJttgS9Eif0fD/hV0PDhSSfckphSWFDD7RMw/NwbcdRREccawpvc6xTc\nv14MY8zxelpZXyf69LR2Oe1EljMIemG+Rgpsv+2ay6E9REThC9hHIb0bjufF/U7TY8uCB95Z0478\nnTKN3jzE60cN2Jknzpol+tRU8jyoqGYfiYPgbhDOywGtBX+hrh2HnPaBLF+reFEeWyjP+9lzgEO5\nKiHrmhmWPg7SAjwy9JevoiiKopQZffgqiqIoSpkZU9l5wJ04W2QWYrmwpjoKr0sRCJQVaqhhOSQ+\ngeXoWIWUnXt7O512ZzvXCk30c6L6NGR0ISLKgySez3I7m2NZtJCTDudFC0IpQF9KQ51blLOPy7MO\nX41QTkVp1nDXHYYMUxYcmwHjlLdkiEcwwONjFUcmO3d3snT/5ttcW3NC8wLeblBm3yoelQWLVoHy\nkHmqWKqmMskMUV7P8FIzjkfRdfyiHm+J7R4XNgT/F1CCBlOIWy4sghQo3sPrARmushlTZPmqroeM\nUGEO9dnTuk3sJxDmeriHO3m+dnYP0vtn+Mxg7ntMYJT85wTbhldHkd3pRNs95c2dKdxDc4rHGfLz\n/R/083pYacr7P1zNJiVfjNtgjSJ/TJqdArVskkr3suxswn1ZqOBMT+etWCEPDjI/DcEcrzkX6oZD\nvWoioreOhhcNVoaoZz+vU6EwS7sfguI6RESxAA/qoSQfZ08vmws9cbluH9zDJhyri+X1Xnj0TaqQ\ntbBDIXgswlrdH+H1rHJKg+ijsrOiKIqi/AmgD19FURRFKTNjKjsnXRmdTMjOgoUMRE5uVxL8NHgO\npyD5eAokwpyrgkM4wrJLrIL7Y+L+YlzWDbZTWPsU5E/Uil0amDfIWq8PMsdU1bM8jj0KGZmtqpRH\nsMgIZcpLaMJgmT5+b0/rfqe9c9e7os8H5n/AaRdH6O38+k6WcAomj2cowtlu/K4sQ8Wj2aqK+Txl\nUWrO83gW3FnCQB7G2pw+ODeUnT1G6e+TeDQWeMZariT8Oazvmxs+q042J6X7HJgicNzRlmAZfPzx\neJrI4G2jbD37PC5YcOPH5Tn8n5c4w1V/P59D2CdNKyXBOVqiHoVbGnYXnni/uxlF9/exn1LFNspD\nqZIepy6vS/7smsuddjgAGfZcZqdomKXR/iFeA/dt3+u0k64ok/AszngXms1ztxqypjWF+R6PmzKr\nVu4wmz8CWZ7vF9z0Sad9qCBrRP/21+uJiKhvaJBmVnOWsvRhXlee/+Vzok+onwsj9MPaOnMZF9fo\nHJKFJjZ2ciGSgX42zfhNvhejFZWiTxKeI1nwvjb7+ZlwToOUnatGWtcEOOnDN51O02233Ua9vb2U\nzWbplltuoblz59Lq1avJsiyqr6+n+++/n/x+/8k2pSiKoigKjeDh+/LLL9P8+fPpL//yL6mtrY3+\n/M//nJYuXUorV66ka6+9lh588EFau3YtrVy5shzHqyiKoih/8pz04fuRj3zEabe3t1NjYyNt3ryZ\n7r77biIiuvzyy+mJJ54Y1cPXDEhvWEyiXwQpMJVhr+isS0Lu6YfkAiDBxirZOy+fkFLmUB68jcGr\nmrwgZXrl0PiC7IXn90H9SZAls64ED2RjfU+QisG72AR37bxHekt7feCtDJIajk3BknJOFryyQyDj\nd3azNPTOrj2iz/xZC4fdz4n41fNbnfa885c47Qh4BJoeOR7HFGHDY4hkHvi5vKsmcibDY1K0WV3J\nF3ncvGI/rprIdgE+B57H4GlsF10etFnuk0yyBIVJ+DGBARFRPg3zIMnHjCp+AY5tsLeHbBsSryR5\njicGIDlKvbxHLlzIntBv7+D9eEfopW6XaJ/Qb7mEhDrSuTIaafh0y7Znap9Ym/dMHvFBqNvrgT35\nXLIzQdKNRA68lWFttF1RCP4YrxPZFM+pdIw/d6CR17+ET67BlTm+/xotvi9eenSN024rynUqkT5i\n7kvsaqNpszjBzJ44mwE39h4UfQiSAeV6+Tw3v8DJM7ry0tt5IMXbK0KhmuooS81eVw3gSBVL7DOm\ncC3qSvAKN72nbrEd8RZuvvlm6ujooEceeYS++MUvOjJzbW0tdXefemFhRVEURRkvGPb7+Lr39ttv\n0+rVq6m7u5s2bdpEREStra1066230jPPPFOyX1dXFzW4DNSKoiiKMl456S/f7du3U21tLU2cOJHO\nPfdcsiyLIpEIZTIZCgaD1NnZedIH68MPP0xERC0tLdTS0uK8/rmv3C4+h7JzNoO5kFkKccvOB9pY\ncmg9xDJFZzcn0uhLyF/mQ0Ps9dbXy8kikgl+Pe7ydsZjM0BLFLJzRkoew8nOvbv2UMN89mYVsnNK\nys6F/PuXnfMlZOcJjexR+N//69+KPp+67hPD7ufBB79PpXj1hVedNsrOyy++wGk3N1eJPqaPaN7S\nS2nn1t8SOhijh3YKZCIiKTuHQlBr1Dcy2TkYCMDnRiY7p8HbcaSyM+YiL4rcu/yZY7LzNR+9gdY9\n9+yIZOeeLpmIZtfb+5322zvYk/POv/+a0/791g1UiuorvsPHCR7fo/EUPnGf4QXuY32+vsJHP34l\nT6eTU/V2PlXZ+f3ytUv89OMNPAZ9G/6+5GetDCSSGIXs3J+EvPmu5EZhMKMVYA2qrISEHY0s0x4n\nO/fx9hp381ob39vqtN2y8550il489A5dOXku1aPs3Mpz2sjKtUDIzmAaIkjMMRrZeWKjrF+NsnNj\nCdk5GJb5z+ur5Vp3DHzeuTnpw/e1116jtrY2+ta3vkU9PT2USqVoxYoVtG7dOvrYxz5G69evpxXu\njCcjpKOrR/w/iK7gPl5QBzHxv+v+SufYfpuBMJVwDDT9kJygFZXsF15TxYPW18sTp7Nbem8nh9jN\n3QOFsS14QKbiQ6IPLuI+Pw91tJIzqviDPPHzAdfDFx7sASjkjmEuRVdi9TCEGngh7Gb6VC5sH47K\niTKY4OOurammkVDIs52kp53tyZs3bnLara1yW6Gwj+YtvZReeWWr+AJhmsOHDRERhWGSByGZOYZY\nWXleZPIFafv0Q4iXD4tgwI1IRbnPAcjys/2tnU57EG7kSZMniz4BeMjH43GnnYNreOwZf81Hb6AX\nX/id+HLV18NzPw0LZdoVftbfz3Mql4IvgXR6H2SnTqmH0h9rSqo/bgaH+Lp74UuGz5XhCgu9GD5e\nCyqgmEo0Ju//iiivh/iFrBf8RPp7uYhHoE5myOqN8/p8cB/7k1h93KfD9SBNHE25N5gYoooUz3cD\nfGv2D3aJPukcfwHxpiFUMMfrlxGV9tv6qXyfNtbzD5DJjZxRrq7WleEqAj45fv6SLXwk3F96RsFJ\nH74333wzfetb36KVK1dSJpOh73znOzR//ny69dZbac2aNdTU1EQ33njjKR+IoiiKoowXTvrwDQaD\n9MMf/vC415988skzckCKoiiKcrYzphmuKly6uQnhEok0SBEe/umfc9lVMyDL+SDzSg5sn9mMlHPT\naZZA4gmWCDMgYRfyUr7MZzBxPmYJwhAi6cJfBdmefCAbRyDDlg9sh+EaaTvHYgqYkSkHx1l01SBF\nuR5l54EkSzO/e3Wz6NM0aRpvm0ZGQz2fQxZqIu99h6X7A/vk9Crkib70DaLfPL+Z0kN8Dnit3HY3\nrFeKkVw4NhnwD3Alq6I8jFtB1NOFGtG2DInCOshxMCWkIUuP6cryg9J5XmTz4fMJHTUx3P9PRM/+\n75fIAv+FNIQnGZhBzesaD0j07jf5/sm4T7wk5ZJ9Rb4nbtlnLgvVWGS7Kl03+ATjPIpLEAGpGDOy\nuesmW7BxTBaHIXfov0JEdCjRwZ8Df4U9OzkT3sG3djhtu0LWv8Wa4jaYDiEhHCVsaR47Nndb7SQV\n+njNSIKJMZ+TczoI62b1BM6+VTeBizZMmDZN9Kmt5trF0RDIyeAn4paQi3BfYoY9YRI7DbeR5nZW\nFEVRlDKjD19FURRFKTNjKjunc/K3ew5DaNCdHuRcryuhPYaZRKNQlxZkjoFBKSGj9CW8ZuFw3LJi\nKDx8xUaUgNxyDmaUL5Tw7vVBTmzDnSEL5BBQg6gI2x0acknq4JHrg+3FIizTRFzezv4Qn9tIxcul\nH2CJHLNSodoXjcls4/nskQG++MI5NDSE4TxD0JZhEEJit9DLm4/UMPj4Ta/0Urcg3MuG2Y4FGEyX\nh7UPstdgNrOiwRPEstxzCusD8+sYCub18jFfe9ksyoA3fBrkbQtkdI/rDg34oe6uyefdVMvHKSsA\nS6TFZGTaWSkJ90T9ZZ9S/UtLw4ZxarpeuTJkuUpQlP6cPZJPnQDUcGFsU1npDT8wwJ76GQiT88Oc\njg8lRJ/uHo46ScC9GB9gCTkJoXTxIRmGaYDHNQrSGM6X9sn7xeM7sj73+gpkDHGWwhn1HNqzaOki\n0ad2InslV9dyJAWum0X36KIJBxY3A8xztstjnLz87PBAGKIXtm2PMKPcidBfvoqiKIpSZvThqyiK\noihlZkxl5xfWPHTGto0C7iT3m6goYx3UihHWRD1FPnbh0rLspyTpQfHvun/92fvexCAklaBAYNjP\nJN0atnlEtukzDaIqlszp8dgAAAb6SURBVEx90B4+T8zZR1XznNO6vX9/6bcj+tzAS/ec1v2Omkta\nqP+lvxvroxhbLm05YVYrJODHFY3b4ZA0j9VURelPiW9/7b+N9SEcj1mex6L+8lUURVGUMqMPX0VR\nFEUpM/rwVRRFUZQyow9fRVEURSkz+vBVFEVRlDKjD19FURRFKTOGXa5UMIqiKIqiEJH+8lUURVGU\nsqMPX0VRFEUpM/rwVRRFUZQyow9fRVEURSkz+vBVFEVRlDKjD19FURRFKTNlq2r0ve99j7Zt20aG\nYdAdd9xBCxcuLNeux5T77ruPtmzZQoVCgb70pS/RggULaPXq1WRZFtXX19P9999Pfr//5Bv6EyaT\nydD1119Pt9xyCy1btmzcnf+zzz5Ljz/+OJmmSV//+tdpzpw542oMkskk3XrrrTQ4OEj5fJ6++tWv\nUn19PbW0tBAR0Zw5c+juu+8e24M8Q+zatYtuueUW+sIXvkCrVq2i9vb2Ya/9s88+Sz/72c/I4/HQ\nTTfdRJ/+9KfH+tBPG8ONwe23306FQoFM06T777+f6uvrz+oxGBa7DGzevNn+q7/6K9u2bXvPnj32\nTTfdVI7djjkbN260/+Iv/sK2bdvu6+uzL730Uvu2226zX3jhBdu2bfuHP/yh/S//8i9jeYhl4cEH\nH7Q/8YlP2L/4xS/G3fn39fXZV199tZ1IJOzOzk77zjvvHHdj8NRTT9kPPPCAbdu23dHRYV9zzTX2\nqlWr7G3bttm2bdvf/OY37Q0bNozlIZ4RksmkvWrVKvvOO++0n3rqKdu27WGvfTKZtK+++mo7Ho/b\n6XTavu666+z+/v6xPPTTxnBjsHr1avv555+3bdu2n376afvee+89q8egFGWRnTdu3EhXXnklERE1\nNzfT4OAgDQ0NlWPXY8oFF1xAP/rRj4iIqKKigtLpNG3evJmuuOIKIiK6/PLLaePGjWN5iGecvXv3\n0p49e+iyyy4jIhp3579x40ZatmwZRaNRamhooHvuuWfcjUF1dTUNDAwQEVE8Hqeqqipqa2tz1K+z\ndQz8fj899thj1NDQ4Lw23LXftm0bLViwgGKxGAWDQVq6dClt3bp1rA77tDLcGNx11110zTXXEBHP\njbN5DEpRlodvT08PVVdXO//X1NRQd3d3OXY9pni9XgqHjxSKX7t2LV1yySWUTqcdibG2tvasH4d7\n772XbrvtNuf/8Xb+hw4dokwmQ1/+8pdp5cqVtHHjxnE3Btdddx0dPnyYrrrqKlq1ahWtXr2aKioq\nnPfP1jEwTZOCwaB4bbhr39PTQzU1Nc5nzqb1cbgxCIfD5PV6ybIs+vnPf04f/ehHz+oxKEXZbL6I\nPc4yWr744ou0du1aeuKJJ+jqq692Xj/bx+GXv/wlLV68mKZMmTLs+2f7+R9jYGCAfvKTn9Dhw4fp\n85//vDjv8TAGv/rVr6ipqYl++tOf0jvvvENf/epXKRaLOe+PhzEYjlLnPR7Gw7IsWr16NX3oQx+i\nZcuW0XPPPSfeHw9jUJaHb0NDA/X09Dj/d3V1UX19fTl2Pea88sor9Mgjj9Djjz9OsViMwuEwZTIZ\nCgaD1NnZKeSYs40NGzbQwYMHacOGDdTR0UF+v39cnT/RkV83S5YsIdM0aerUqRSJRMjr9Y6rMdi6\ndStdfPHFREQ0d+5cymazVCgUnPfHwxgcY7j5P9z6uHjx4jE8yjPP7bffTtOmTaO//uu/JqLhnxFn\n+xiURXa+6KKLaN26dUREtGPHDmpoaKBoNFqOXY8piUSC7rvvPnr00UepqqqKiIiWL1/ujMX69etp\nxYoVY3mIZ5R//Md/pF/84hf0r//6r/TpT3+abrnllnF1/kREF198MW3atImKxSL19/dTKpUad2Mw\nbdo02rZtGxERtbW1USQSoebmZnrttdeIaHyMwTGGu/aLFi2it956i+LxOCWTSdq6dSudf/75Y3yk\nZ45nn32WfD4fff3rX3deG29jQFTGqkYPPPAAvfbaa2QYBt111100d+7ccux2TFmzZg099NBDNGPG\nDOe1H/zgB3TnnXdSNpulpqYm+v73v08+n28Mj7I8PPTQQzRp0iS6+OKL6dZbbx1X5//MM8/Q2rVr\niYjoK1/5Ci1YsGBcjUEymaQ77riDent7qVAo0De+8Q2qr6+n73znO1QsFmnRokV0++23j/Vhnna2\nb99O9957L7W1tZFpmtTY2EgPPPAA3Xbbbcdd+1//+tf005/+lAzDoFWrVtENN9ww1od/WhhuDHp7\neykQCDg/wJqbm6mlpeWsHYNSaElBRVEURSkzmuFKURRFUcqMPnwVRVEUpczow1dRFEVRyow+fBVF\nURSlzOjDV1EURVHKjD58FUVRFKXM6MNXURRFUcqMPnwVRVEUpcz8PwLkVuPDSiscAAAAAElFTkSu\nQmCC\n","text/plain":["<Figure size 576x396 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["ship\n","dog\n","bird\n","truck\n","<class 'torch.Tensor'> torch.Size([4, 3, 32, 32])\n","<class 'torch.Tensor'> torch.Size([4]) tensor([8, 5, 2, 9])\n"],"name":"stdout"}]},{"metadata":{"id":"RxnfFJwBcsAv","colab_type":"text"},"cell_type":"markdown","source":["## Model Architecture"]},{"metadata":{"id":"J-LTLi8yxY3i","colab_type":"code","colab":{}},"cell_type":"code","source":["##### My Code ######\n","\n","class MLP(nn.Module):   \n","    def __init__(self,in_dim,hid_dim,out_dim,n_layer,act):\n","        super(MLP, self).__init__() # super는 다중상속시 슈퍼 클래스의 method를 호출하라는 의미\n","        self.in_dim = in_dim\n","        self.hid_dim = hid_dim\n","        self.out_dim = out_dim\n","        self.n_layer = n_layer\n","        self.act = act\n","        \n","        # input --> act(output)\n","        self.fc = nn.Linear(self.in_dim, self.hid_dim)\n","        # act(output) --> hid_dim을 가진 linear(fc) layer에 n-1번 통과\n","        self.linears = nn.ModuleList()\n","        # n-1번 fc layer를 통과\n","        for i in range(self.n_layer-1):\n","            self.linears.append(nn.Linear(self.hid_dim, self.hid_dim))\n","        # out_dim은 최종 클래스 갯수대로\n","        self.fc2 = nn.Linear(self.hid_dim, self.out_dim)\n","        \n","        if self.act == 'relu':\n","            self.act = nn.ReLU()\n","            \n","    def forward(self, x):\n","        x = self.act(self.fc(x))\n","        for fc in self.linears: ### 여기 잘 이해 안 가..이렇게만 써도 레이어를 통과하게 되는 거야?\n","            x = self.act(fc(x)) \n","        x = self.fc2(x)    \n","        return x\n","    \n","net = MLP(3072, 100, 10, 5, 'relu') # 3072 = 32*32(pixel)*3(RGB)\n","      "],"execution_count":0,"outputs":[]},{"metadata":{"id":"itGsp6jDWs_a","colab_type":"text"},"cell_type":"markdown","source":["## Define Experiment"]},{"metadata":{"colab_type":"code","id":"kZFDYVR7NMGt","colab":{}},"cell_type":"code","source":["def experiment(args):\n","  \n","    net = MLP(args.in_dim, args.hid_dim, args.out_dim, args.n_layer, args.act)\n","    net.cuda()\n","    print(net)\n","\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.SGD(net.parameters(), lr=args.lr, momentum=args.mm)\n","    \n","    for epoch in range(args.epoch):  # loop over the dataset multiple times\n","\n","        # ==== Train ===== #\n","        net.train()\n","        optimizer.zero_grad()\n","        \n","        running_loss = 0.0\n","        train_loss = 0.0\n","        for i, data in enumerate(trainloader, 0):\n","            # get the inputs\n","            inputs, labels = data\n","            inputs = inputs.view(-1, 3072)\n","            \n","            inputs = inputs.cuda()\n","            labels = labels.cuda()\n","            \n","\n","            # zero the parameter gradients\n","            optimizer.zero_grad() # 왜 여기서 또 나오지??\n","\n","            # forward + backward + optimize\n","            outputs = net(inputs)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","\n","            # print statistics\n","            running_loss += loss.item()\n","            train_loss += loss.item()\n","            if i % 2000 == 1999:    # print every 2000 mini-batches\n","                print('[%d, %5d] loss: %.3f' %\n","                      (epoch + 1, i + 1, running_loss / 2000))\n","                running_loss = 0.0\n","                \n","\n","        # ==== Validation ====== #\n","        net.eval()\n","        optimizer.zero_grad()\n","        \n","        correct = 0\n","        total = 0\n","        val_loss = 0 ########\n","        with torch.no_grad():\n","            for data in valloader:\n","                images, labels = data\n","                images = images.view(-1, 3072)\n","                \n","                ################################\n","                images = images.cuda()\n","                labels = labels.cuda()\n","                \n","                outputs = net(images)\n","\n","                loss = criterion(outputs, labels)\n","                val_loss += loss.item()\n","\n","                _, predicted = torch.max(outputs.data, 1)\n","                total += labels.size(0)\n","                correct += (predicted == labels).sum().item()\n","\n","            val_loss = val_loss / len(valloader)\n","            val_acc = 100 * correct / total\n","            \n","        print('Epoch {}, Train Loss: {}, Val Loss: {}, Val Acc: {}'.format(epoch, train_loss, val_loss, val_acc ))\n","\n","\n","    # ===== Evaluation ===== #\n","    net.eval()\n","    optimizer.zero_grad()\n","    \n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for data in testloader:\n","            images, labels = data\n","            images = images.view(-1, 3072)\n","            images = images.cuda()\n","            labels = labels.cuda()\n","\n","            outputs = net(images)\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","\n","        test_acc = 100 * correct / total\n","            \n","    return train_loss, val_loss, val_acc, test_acc\n","    "],"execution_count":0,"outputs":[]},{"metadata":{"id":"ImUoSN4XhAMQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":4491},"outputId":"3a896c9e-7924-4cc4-e624-53059f9a4f79","executionInfo":{"status":"ok","timestamp":1548593357025,"user_tz":-540,"elapsed":2026247,"user":{"displayName":"Sohee Kim","photoUrl":"","userId":"05479685237522775569"}}},"cell_type":"code","source":["##### My Code ######\n","\n","import argparse\n","\n","np.random.seed(seed)\n","torch.manual_seed(seed)\n","\n","parser = argparse.ArgumentParser()\n","args = parser.parse_args(\"\")\n","print(type(args))\n","\n","#### model related parameters ####\n","args.in_dim = 3072\n","args.hid_dim = 100\n","args.out_dim = 10\n","args.n_layer = 5\n","\n","#### Hyperparameters ####\n","args.act = 'relu'\n","args.lr = 0.001\n","args.mm = 0.9\n","args.epoch = 3\n","\n","layer_list = [3,4,5]\n","hid_dim_list = [50,100,150]\n","\n","for layer in layer_list:\n","    for dim in hid_dim_list:\n","        args.n_layer = layer\n","        args.hid_dim = dim\n","        result = experiment(args)\n","        print(result)\n"],"execution_count":86,"outputs":[{"output_type":"stream","text":["<class 'argparse.Namespace'>\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=50, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=50, out_features=50, bias=True)\n","    (1): Linear(in_features=50, out_features=50, bias=True)\n","  )\n","  (fc2): Linear(in_features=50, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.094\n","[1,  4000] loss: 1.809\n","[1,  6000] loss: 1.735\n","[1,  8000] loss: 1.680\n","[1, 10000] loss: 1.645\n","Epoch 0, Train Loss: 17926.970511972904, Val Loss: 1.6315578446149825, Val Acc: 42.0\n","[2,  2000] loss: 1.578\n","[2,  4000] loss: 1.578\n","[2,  6000] loss: 1.552\n","[2,  8000] loss: 1.544\n","[2, 10000] loss: 1.540\n","Epoch 1, Train Loss: 15584.14588984847, Val Loss: 1.5388641041517257, Val Acc: 45.71\n","[3,  2000] loss: 1.480\n","[3,  4000] loss: 1.482\n","[3,  6000] loss: 1.477\n","[3,  8000] loss: 1.459\n","[3, 10000] loss: 1.477\n","Epoch 2, Train Loss: 14751.207640051842, Val Loss: 1.486829084467888, Val Acc: 47.67\n","(14751.207640051842, 1.486829084467888, 47.67, 47.5)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=100, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=100, out_features=100, bias=True)\n","    (1): Linear(in_features=100, out_features=100, bias=True)\n","  )\n","  (fc2): Linear(in_features=100, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.042\n","[1,  4000] loss: 1.765\n","[1,  6000] loss: 1.698\n","[1,  8000] loss: 1.669\n","[1, 10000] loss: 1.620\n","Epoch 0, Train Loss: 17587.7213819623, Val Loss: 1.652027779197693, Val Acc: 41.51\n","[2,  2000] loss: 1.538\n","[2,  4000] loss: 1.541\n","[2,  6000] loss: 1.523\n","[2,  8000] loss: 1.515\n","[2, 10000] loss: 1.481\n","Epoch 1, Train Loss: 15194.814190298319, Val Loss: 1.5099204974889755, Val Acc: 46.98\n","[3,  2000] loss: 1.425\n","[3,  4000] loss: 1.416\n","[3,  6000] loss: 1.414\n","[3,  8000] loss: 1.423\n","[3, 10000] loss: 1.412\n","Epoch 2, Train Loss: 14178.966199845076, Val Loss: 1.4286609100461005, Val Acc: 49.26\n","(14178.966199845076, 1.4286609100461005, 49.26, 49.83)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=150, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=150, out_features=150, bias=True)\n","    (1): Linear(in_features=150, out_features=150, bias=True)\n","  )\n","  (fc2): Linear(in_features=150, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.046\n","[1,  4000] loss: 1.791\n","[1,  6000] loss: 1.699\n","[1,  8000] loss: 1.646\n","[1, 10000] loss: 1.598\n","Epoch 0, Train Loss: 17560.573272526264, Val Loss: 1.602755224943161, Val Acc: 43.26\n","[2,  2000] loss: 1.536\n","[2,  4000] loss: 1.518\n","[2,  6000] loss: 1.500\n","[2,  8000] loss: 1.483\n","[2, 10000] loss: 1.481\n","Epoch 1, Train Loss: 15036.301719635725, Val Loss: 1.487709795665741, Val Acc: 47.0\n","[3,  2000] loss: 1.407\n","[3,  4000] loss: 1.394\n","[3,  6000] loss: 1.381\n","[3,  8000] loss: 1.395\n","[3, 10000] loss: 1.399\n","Epoch 2, Train Loss: 13950.834841609001, Val Loss: 1.418514944911003, Val Acc: 49.49\n","(13950.834841609001, 1.418514944911003, 49.49, 49.37)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=50, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=50, out_features=50, bias=True)\n","    (1): Linear(in_features=50, out_features=50, bias=True)\n","    (2): Linear(in_features=50, out_features=50, bias=True)\n","  )\n","  (fc2): Linear(in_features=50, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.216\n","[1,  4000] loss: 1.928\n","[1,  6000] loss: 1.787\n","[1,  8000] loss: 1.732\n","[1, 10000] loss: 1.663\n","Epoch 0, Train Loss: 18654.820709735155, Val Loss: 1.6470802279949188, Val Acc: 41.3\n","[2,  2000] loss: 1.628\n","[2,  4000] loss: 1.601\n","[2,  6000] loss: 1.579\n","[2,  8000] loss: 1.570\n","[2, 10000] loss: 1.562\n","Epoch 1, Train Loss: 15880.22344431281, Val Loss: 1.5634045214533805, Val Acc: 45.74\n","[3,  2000] loss: 1.496\n","[3,  4000] loss: 1.504\n","[3,  6000] loss: 1.483\n","[3,  8000] loss: 1.491\n","[3, 10000] loss: 1.479\n","Epoch 2, Train Loss: 14907.873538345098, Val Loss: 1.5211337886333465, Val Acc: 46.59\n","(14907.873538345098, 1.5211337886333465, 46.59, 46.5)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=100, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=100, out_features=100, bias=True)\n","    (1): Linear(in_features=100, out_features=100, bias=True)\n","    (2): Linear(in_features=100, out_features=100, bias=True)\n","  )\n","  (fc2): Linear(in_features=100, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.171\n","[1,  4000] loss: 1.895\n","[1,  6000] loss: 1.794\n","[1,  8000] loss: 1.738\n","[1, 10000] loss: 1.670\n","Epoch 0, Train Loss: 18536.2565459311, Val Loss: 1.6366960344791412, Val Acc: 41.54\n","[2,  2000] loss: 1.587\n","[2,  4000] loss: 1.625\n","[2,  6000] loss: 1.558\n","[2,  8000] loss: 1.532\n","[2, 10000] loss: 1.521\n","Epoch 1, Train Loss: 15647.51857072115, Val Loss: 1.5395076320290566, Val Acc: 45.09\n","[3,  2000] loss: 1.447\n","[3,  4000] loss: 1.454\n","[3,  6000] loss: 1.438\n","[3,  8000] loss: 1.460\n","[3, 10000] loss: 1.448\n","Epoch 2, Train Loss: 14493.523132413626, Val Loss: 1.4938632395386695, Val Acc: 47.03\n","(14493.523132413626, 1.4938632395386695, 47.03, 47.86)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=150, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=150, out_features=150, bias=True)\n","    (1): Linear(in_features=150, out_features=150, bias=True)\n","    (2): Linear(in_features=150, out_features=150, bias=True)\n","  )\n","  (fc2): Linear(in_features=150, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.163\n","[1,  4000] loss: 1.859\n","[1,  6000] loss: 1.753\n","[1,  8000] loss: 1.674\n","[1, 10000] loss: 1.659\n","Epoch 0, Train Loss: 18216.952519625425, Val Loss: 1.6320449366807939, Val Acc: 41.76\n","[2,  2000] loss: 1.586\n","[2,  4000] loss: 1.546\n","[2,  6000] loss: 1.539\n","[2,  8000] loss: 1.533\n","[2, 10000] loss: 1.496\n","Epoch 1, Train Loss: 15403.063583403826, Val Loss: 1.5093136803746223, Val Acc: 46.61\n","[3,  2000] loss: 1.435\n","[3,  4000] loss: 1.424\n","[3,  6000] loss: 1.428\n","[3,  8000] loss: 1.408\n","[3, 10000] loss: 1.396\n","Epoch 2, Train Loss: 14180.780824929476, Val Loss: 1.4351381132602692, Val Acc: 48.97\n","(14180.780824929476, 1.4351381132602692, 48.97, 49.43)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=50, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=50, out_features=50, bias=True)\n","    (1): Linear(in_features=50, out_features=50, bias=True)\n","    (2): Linear(in_features=50, out_features=50, bias=True)\n","    (3): Linear(in_features=50, out_features=50, bias=True)\n","  )\n","  (fc2): Linear(in_features=50, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.280\n","[1,  4000] loss: 2.071\n","[1,  6000] loss: 1.910\n","[1,  8000] loss: 1.820\n","[1, 10000] loss: 1.770\n","Epoch 0, Train Loss: 19700.726486563683, Val Loss: 1.7227628042459489, Val Acc: 38.19\n","[2,  2000] loss: 1.709\n","[2,  4000] loss: 1.668\n","[2,  6000] loss: 1.663\n","[2,  8000] loss: 1.636\n","[2, 10000] loss: 1.593\n","Epoch 1, Train Loss: 16538.13003861904, Val Loss: 1.6043637758493423, Val Acc: 42.46\n","[3,  2000] loss: 1.568\n","[3,  4000] loss: 1.549\n","[3,  6000] loss: 1.536\n","[3,  8000] loss: 1.525\n","[3, 10000] loss: 1.523\n","Epoch 2, Train Loss: 15401.192255020142, Val Loss: 1.5364645614385606, Val Acc: 44.96\n","(15401.192255020142, 1.5364645614385606, 44.96, 45.52)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=100, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=100, out_features=100, bias=True)\n","    (1): Linear(in_features=100, out_features=100, bias=True)\n","    (2): Linear(in_features=100, out_features=100, bias=True)\n","    (3): Linear(in_features=100, out_features=100, bias=True)\n","  )\n","  (fc2): Linear(in_features=100, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.298\n","[1,  4000] loss: 2.079\n","[1,  6000] loss: 1.900\n","[1,  8000] loss: 1.809\n","[1, 10000] loss: 1.722\n","Epoch 0, Train Loss: 19616.06073665619, Val Loss: 1.7462740283250808, Val Acc: 36.55\n","[2,  2000] loss: 1.655\n","[2,  4000] loss: 1.626\n","[2,  6000] loss: 1.605\n","[2,  8000] loss: 1.583\n","[2, 10000] loss: 1.571\n","Epoch 1, Train Loss: 16080.48772868514, Val Loss: 1.566131022644043, Val Acc: 43.58\n","[3,  2000] loss: 1.500\n","[3,  4000] loss: 1.505\n","[3,  6000] loss: 1.478\n","[3,  8000] loss: 1.480\n","[3, 10000] loss: 1.450\n","Epoch 2, Train Loss: 14825.341930449009, Val Loss: 1.4956881961226463, Val Acc: 47.02\n","(14825.341930449009, 1.4956881961226463, 47.02, 47.33)\n","MLP(\n","  (fc): Linear(in_features=3072, out_features=150, bias=True)\n","  (linears): ModuleList(\n","    (0): Linear(in_features=150, out_features=150, bias=True)\n","    (1): Linear(in_features=150, out_features=150, bias=True)\n","    (2): Linear(in_features=150, out_features=150, bias=True)\n","    (3): Linear(in_features=150, out_features=150, bias=True)\n","  )\n","  (fc2): Linear(in_features=150, out_features=10, bias=True)\n","  (act): ReLU()\n",")\n","[1,  2000] loss: 2.295\n","[1,  4000] loss: 2.098\n","[1,  6000] loss: 1.915\n","[1,  8000] loss: 1.781\n","[1, 10000] loss: 1.728\n","Epoch 0, Train Loss: 19635.0122666955, Val Loss: 1.7406802712678908, Val Acc: 37.7\n","[2,  2000] loss: 1.671\n","[2,  4000] loss: 1.613\n","[2,  6000] loss: 1.589\n","[2,  8000] loss: 1.583\n","[2, 10000] loss: 1.571\n","Epoch 1, Train Loss: 16055.627932727337, Val Loss: 1.5565932639598847, Val Acc: 43.69\n","[3,  2000] loss: 1.489\n","[3,  4000] loss: 1.477\n","[3,  6000] loss: 1.483\n","[3,  8000] loss: 1.462\n","[3, 10000] loss: 1.441\n","Epoch 2, Train Loss: 14701.640156030655, Val Loss: 1.4622249170184136, Val Acc: 48.25\n","(14701.640156030655, 1.4622249170184136, 48.25, 48.92)\n"],"name":"stdout"}]},{"metadata":{"id":"omgExzmQgU1J","colab_type":"text"},"cell_type":"markdown","source":["## Experiment"]},{"metadata":{"id":"VtezNo3L8IGR","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"AjTMiss6_cFi","colab_type":"text"},"cell_type":"markdown","source":["| THis | is |\n","|---------|-----|\n","|   a     |table|"]},{"metadata":{"id":"BgXfKWrv_e4h","colab_type":"code","colab":{}},"cell_type":"code","source":["!pip install tabletext\n","import tabletext\n","\n","data = [[args.in_dim, args.hid_dim, args.lr],\n","       [124, 24, 43]]\n","\n","print(tabletext.to_text(data))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"FJN_O5vAATMC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":314},"outputId":"fed5d53c-7cff-4c38-f197-f8871f2a802a","executionInfo":{"status":"error","timestamp":1548593833267,"user_tz":-540,"elapsed":495,"user":{"displayName":"Sohee Kim","photoUrl":"","userId":"05479685237522775569"}}},"cell_type":"code","source":["fig = plt.figure(figsize=(15,5))\n","\n","# ======== Loss ========== #\n","ax1 = fig.add_subplot(5,3,1)\n","ax1.plot(list_epoch, list_train_loss, label = 'train loss')\n","ax1.plot(list_epoch, list_val_loss, label = 'validation loss')\n","ax1.set_xlabel('epoch')\n","ax1.set_ylabel('loss')\n","ax1.grid()\n","ax1.legend()\n","ax1.set_title('epoch vs loss')\n","\n","# ======= Accuracy ======= #\n","ax2 = fig.add_subplot(5,3,2)\n","ax2.plot(list_acc_epoch, list_acc, marker='x', label = 'Accuracy metrics')\n","ax2.set_xlabel('epoch')\n","ax2.set_ylabel('Acc')\n","ax2.grid()\n","ax2.legend()\n","ax2.set_title('epoch vs Accuracy')\n","\n","\n","plt.show()"],"execution_count":88,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-88-3d3f3b54c188>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# ======== Loss ========== #\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0max1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_subplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_epoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_train_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'train loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist_epoch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist_val_loss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'validation loss'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'epoch'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'list_epoch' is not defined"]},{"output_type":"display_data","data":{"image/png":"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\nIpKGBURE0vwPK52wdDeM6UMAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"RLYAF_X9PHja","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}